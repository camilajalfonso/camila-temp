<script lang="ts" setup>
import { AUDIENCE_RUN_DETAIL_ROUTE, TEST_SETUP_STEP_ROUTE } from '~/constants'

const userStore = useUserStore()
const route = useRoute()
const router = useRouter()

const qeToolsToggle = Object.keys(route.query).map(x => x.toLowerCase()).includes('qetoolstoggle')
const enabled = Object.keys(route.query).map(x => x.toLowerCase()).includes('qetools') || qeToolsToggle

interface Settings {
  [key: string]: any
}

const qetools = ref<HTMLElement | null>(null)
let settings: Settings = {
  enabled,
  qeToolsToggle,
}
const qeState = useStorage('okapi-admin-app-qe', settings, localStorage, { mergeDefaults: true })
const environment = import.meta.env
const isDev = import.meta.env.DEV

const overrideFeatureList = [
  {
    key: 'entityMappings',
    label: 'Entity Mappings',
    type: 'toggle',
    value: false,
  },
  {
    key: 'consoleLogs',
    label: 'Logs',
    type: 'toggle',
    value: false,
  },
  {
    key: 'consoleLogsPinia',
    label: 'Logs Pinia',
    type: 'toggle',
    value: false,
  },
  {
    key: 'consoleLogsVerbose',
    label: 'Logs Verbose',
    type: 'toggle',
    value: false,
  },
  // {
  //   key: 'dialogDebug',
  //   label: 'Dialog State',
  //   type: 'toggle',
  //   value: false,
  // },
  {
    key: 'debugPanelPos',
    label: 'Debug Panel Position',
    value: 'bottom',
  },
  {
    key: 'runMockScenarioEnabled',
    label: 'Run Scenarios',
    type: 'toggle',
    value: false,
    disabled: route.name !== AUDIENCE_RUN_DETAIL_ROUTE,
  },
  {
    key: 'testSetupDebugEnabled',
    label: 'Test Debug',
    type: 'toggle',
    value: false,
    disabled: route.name !== TEST_SETUP_STEP_ROUTE,
  },
  {
    key: 'routeDebug',
    label: 'Route',
    type: 'toggle',
    value: false,
  },
  {
    key: 'envInfo',
    label: 'Environment',
    type: 'toggle',
    value: false,
  },
  {
    key: 'useBricksDialog',
    label: 'Bricks Dialog',
    type: 'toggle',
    value: !isDev,
  },
  {
    key: 'disableDialogs',
    label: 'disableDialogs',
    type: 'toggle',
    value: true,
  },
  // TODO: this is not working
  // {
  //   key: 'allowDelete',
  //   label: 'Enable Delete',
  //   type: 'toggle',
  //   value: false,
  // },
  {
    key: 'visualizationEnabled',
    label: 'Enable Visualization',
    type: 'toggle',
    value: false,
  },
  {
    key: 'breakpointsDebug',
    label: 'Breakpoints',
    type: 'toggle',
    value: false,
  },
]

function isFeatEnabled(key = 'runMockScenarioEnabled') {
  const feat = (overrideFeatureList.find((x: any) => x.key === key))
  return feat && !feat.disabled
}

const defaultFeatures = overrideFeatureList.reduce((acc, curr) => {
  acc[curr.key] = curr.value
  return acc
}, settings)

if (qeState.value) {
  settings = {
    ...settings,
    ...defaultFeatures,
    ...qeState.value,
  }
}

const showQETools = computed(() => qeState.value.enabled)
const containerClassess = computed(() => ({
  'absolute right-0 top-4 m-2 max-w-96': qeState.value.debugPanelPos === 'right',
  'sticky bottom-0 mx-2 bottom-8 max-h-20rem': qeState.value.debugPanelPos === 'bottom',
}))

function onDisable() {
  qeState.value.enabled = false
  if (enabled)
    router.push({ path: route.path })
}

nextTick(() => {
  qeState.value = settings
})

if (enabled) {
  nextTick(() => {
    qeState.value = settings
    qeState.value.enabled = true
  })
}
if (qeToolsToggle || isDev) {
  nextTick(() => {
    qeState.value = settings
    qeState.value.qeToolsToggle = true
  })
}
</script>

<template>
  <div
    v-if="showQETools"
    :class="containerClassess"
    class="z-20 grid overflow-auto rounded-lg rounded-xl bg-violet-50 px-3 py-2 shadow-slate-8 ring-1 ring-violet-3 drop-shadow-xl dark:bg-black dark:shadow-gray-50 dark:ring-blue-5 dark:ring-blue-9"
  >
    <div class="flex justify-between gap-x-4 text-xs">
      <div flex items-center>
        <h2 class="mr-2 text-base text-blue-6 font-semibold">
          QE Tools
        </h2>

        <button @click="qeState.qeToolsToggle = !qeState.qeToolsToggle">
          <i class="i-fluent:add-square-multiple-16-regular mr-1 text-lg text-blue-5 hover:text-blue-6" />
        </button>
        <QEToolsToggle />
      </div>
      <div flex items-baseline gap-x-1>
        <button
          :class="{ 'order-last': qeState.debugPanelPos === 'bottom' }"
          @click="qeState.debugPanelPos = 'right'"
        >
          <i
            class="i-fluent:dock-panel-right-16-regular text-lg"
            :class="[qeState.debugPanelPos === 'right' ? 'text-blue-5 hover:text-blue-6' : 'text-gray-500 hover:text-gray-600']"
          />
        </button>
        <button :class="{ 'order-last': qeState.debugPanelPos === 'right' }" @click="qeState.debugPanelPos = 'bottom'">
          <i
            class="i-fluent:dock-panel-bottom-20-regular text-lg"
            :class="[qeState.debugPanelPos === 'bottom' ? 'text-blue-5 hover:text-blue-6' : 'text-gray-500 hover:text-gray-600 ']"
          />
        </button>
        <button
          class="order-first mb-3 ml-2"
          data-testid="dialog-close"
          @click="onDisable"
        >
          <i i-symbol-xmark text-gray />
        </button>
      </div>
    </div>

    <div>
      <div class="flex flex-wrap items-baseline justify-start gap-x-4 text-xs text-gray-500">
        <bricks-switch
          v-for="(feat, idx) in overrideFeatureList.filter(x => x.type === 'toggle' && !x.disabled)"
          :key="idx"
          :checked="qeState[feat.key]"
          size="small"
          @bricks-switch-change="qeState[feat.key] = $event.target.checked"
        >
          {{ feat.label }}
        </bricks-switch>
      </div>

      <div class="flex" :class="[qeState.debugPanelPos === 'bottom' ? 'flex-row' : 'flex-col']">
        <DebugOutput :visible="qeState.viewControls">
          <pre text-xs text-violet-5 text-debug-pre>{{ viewControls.controls }}</pre>
        </DebugOutput>

        <EntityMappingsDebug
          v-if="qeState.entityMappings"
        />

        <TestSetupDebug
          v-if="qeState.testSetupDebugEnabled && isFeatEnabled('testSetupDebugEnabled')"
        />

        <DebugOutput :visible="qeState.routeDebug">
          <pre text-xs text-debug-pre>{{ route.name }}</pre>
          <pre text-xs text-debug-pre>{{ route.params }}</pre>
        </DebugOutput>

        <!-- FIXME: this seems to be rendering regarless of the v-if! -->
        <RunMockScenario
          v-if="qeState.runMockScenarioEnabled && isFeatEnabled('runMockScenarioEnabled')"
          class="my-2"
        />

        <Breakpoints v-if="qeState.breakpointsDebug" />

        <DebugOutput :visible="qeState.envInfo">
          <pre text-red-7 text-debug-pre>appConfig: {{ userStore.appConfig.env }}</pre>
          <pre text-debug-pre>environment: {{ environment }}</pre>
        </DebugOutput>

        <div id="qetools" ref="qetools" />
      </div>

      <!-- <pre text-debug-pre>enabled: {{ enabled }}</pre> -->
      <!-- <pre text-debug-pre>qeState: {{ qeState }}</pre> -->
    </div>
  </div>
</template>
